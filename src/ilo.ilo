import lib.std
import lib.std.argparse
import lib.ilo.generator
import lib.ilo.lexer
import lib.ilo.parser


buffer DUMP_TOKENS  1  # bool
buffer DUMP_OPCODES 1  # bool


def parse_arguments: ptr argv, int argc -> ptr
    # Returns an args object
    argparse_init

    "--verify-memory" ARG_TYPE_FLAG "Verify the dynamically allocated memory"
    argparse_add_argument
    "--dump-memory" ARG_TYPE_FLAG "Print the dynamically allocated memory"
    argparse_add_argument
    "--dump-tokens" ARG_TYPE_FLAG "Print the tokens"
    argparse_add_argument
    "--dump-opcodes" ARG_TYPE_FLAG "Print the opcodes"
    argparse_add_argument
    "filename" ARG_TYPE_POSITIONAL "Source code filename"
    argparse_add_argument

    argv argc argparse_parse_args


def main: ptr argv, int argc -> int
    # Parse arguments
    argv argc parse_arguments

    "--verify-memory" over args.kwargs + derefp dict_fetch arg.value + derefp NULL != \
        VERIFY_MEMORY setb
    "--dump-memory" over args.kwargs + derefp dict_fetch arg.value + derefp NULL != \
        DUMP_MEMORY setb
    "--dump-tokens" over args.kwargs + derefp dict_fetch arg.value + derefp NULL != \
        DUMP_TOKENS setb
    "--dump-opcodes" over args.kwargs + derefp dict_fetch arg.value + derefp NULL != \
        DUMP_OPCODES setb

    # Get filename
    0 over args.posargs + derefp list_fetch_ptr

    # Free args object
    swap free

    # Tokenize file
    dup read_file
    tokenize

    DUMP_TOKENS derefb if
        dup dump_tokens

    # Parse tokens
    parse

    DUMP_OPCODES derefb if
        dup dump_opcodes

    # Generate code
    generate_code_x86_64_linux

    0
