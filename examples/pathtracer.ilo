import lib.std


const WIDTH   256
const HEIGHT  256


# Pixel struct

const pixel.r     0
const pixel.g     8
const pixel.b     16
const PIXEL_SIZE  24

def create_pixel: int r, int g, int b -> ptr
    # Create a pixel
    PIXEL_SIZE malloc
    r over pixel.r + seti
    g over pixel.g + seti
    b over pixel.b + seti


# Vector struct

const vec.x     0
const vec.y     8
const vec.z     16
const VEC_SIZE  24

def create_vec: int x, int y, int z -> ptr
    # Create a vector
    VEC_SIZE malloc
    x over vec.x + seti
    y over vec.y + seti
    z over vec.z + seti

def vec_add: ptr a, ptr b -> ptr
    # Add two vectors
    # Note that this frees or alters the given vectors!
    a
    dup vec.x + dup derefi b vec.x + derefi + swap seti
    dup vec.y + dup derefi b vec.y + derefi + swap seti
    dup vec.z + dup derefi b vec.z + derefi + swap seti
    b free

def vec_scale: ptr v, int s -> ptr
    # Scale a vector up
    v
    dup vec.x + dup derefi s * swap seti
    dup vec.y + dup derefi s * swap seti
    dup vec.z + dup derefi s * swap seti

def vec_shrink: ptr v, int s -> ptr
    # Scale a vector down
    v
    dup vec.x + dup derefi s / swap seti
    dup vec.y + dup derefi s / swap seti
    dup vec.z + dup derefi s / swap seti

def vec_len_sqr: ptr v -> int
    # Returns the square of the length of a given vector
    v vec.x + derefi dup *
    v vec.y + derefi dup * +
    v vec.z + derefi dup * +

def vec_len: ptr v -> int
    # Returns the length of a given vector
    v vec_len_sqr sqrt


# Pathtracer

def render_pixel: int x, int y -> ptr
    # Calculate a single pixel
    x y 64 create_pixel


def main: ptr argv, int argc -> int
    # Print PPM metadata
    "P3 " puts
    WIDTH itos puts " " puts
    HEIGHT itos puts " " puts
    "256\n" puts

    # Render image
    0
    while dup HEIGHT <
        0
        while dup WIDTH <
            over over swap render_pixel
            dup pixel.r + derefi itos puts " " puts
            dup pixel.g + derefi itos puts " " puts
            dup pixel.b + derefi itos puts " " puts
            free
            1 +
        drop
        1 +

        "\n" puts
    0
