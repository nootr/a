import lib.std


const WIDTH           320
const HEIGHT          180
const COLOR_PRECISION 256


# Color struct

const color.r     0   # ratio
const color.g     8   # ratio
const color.b     16  # ratio
const COLOR_SIZE  24

def create_color: ptr r, ptr g, ptr b -> ptr
    # Create a color
    COLOR_SIZE malloc
    r over color.r + setp
    g over color.g + setp
    b over color.b + setp


def free_color: ptr color -> void
    # Frees a color
    color
    dup color.r + derefp free
    dup color.g + derefp free
    dup color.b + derefp free
    free


# Point struct

const point.x     0   # ratio
const point.y     8   # ratio
const point.z     16  # ratio
const POINT_SIZE  24

def create_point: ptr x, ptr y, ptr z -> ptr
    # Create a point
    POINT_SIZE malloc
    x over point.x + setp
    y over point.y + setp
    z over point.z + setp


# Vector struct

const vec.x     0   # ratio
const vec.y     8   # ratio
const vec.z     16  # ratio
const VEC_SIZE  24

def create_vec: ptr x, ptr y, ptr z -> ptr
    # Create a vector
    VEC_SIZE malloc
    x over vec.x + setp
    y over vec.y + setp
    z over vec.z + setp

def copy_vec: ptr v -> ptr
    # Returns a copy of a given vector
    VEC_SIZE malloc
    v over VEC_SIZE memcpy

def vec_add: ptr a, ptr b -> ptr
    # Add two vectors
    # Note that this frees or alters the given vectors!
    a
    dup vec.x + dup derefp b vec.x + derefp ratio_add swap setp
    dup vec.y + dup derefp b vec.y + derefp ratio_add swap setp
    dup vec.z + dup derefp b vec.z + derefp ratio_add swap setp
    b free

def vec_scale: ptr v, ptr s -> ptr
    # Scale a vector up by ratio s
    v
    dup vec.x + dup derefp s ratio_mul swap setp
    dup vec.y + dup derefp s ratio_mul swap setp
    dup vec.z + dup derefp s ratio_mul swap setp

def vec_shrink: ptr v, ptr s -> ptr
    # Scale a vector down by ratio s
    v
    dup vec.x + dup derefp s ratio_div swap setp
    dup vec.y + dup derefp s ratio_div swap setp
    dup vec.z + dup derefp s ratio_div swap setp

def vec_len_sqr: ptr v -> ptr
    # Returns the square of the length of a given vector as ratio
    v vec.x + derefp dup ratio_mul
    v vec.y + derefp dup ratio_mul ratio_add
    v vec.z + derefp dup ratio_mul ratio_add

def vec_len: ptr v -> ptr
    # Returns the length of a given vector as ratio
    v vec_len_sqr ratio_sqrt


# Ray struct

const ray.origin    0
const ray.direction 8
const RAY_SIZE      16

def create_ray: ptr o, ptr d -> ptr
    # Create a ray
    RAY_SIZE malloc
    o over ray.origin +     setp
    d over ray.direction +  setp

def free_ray: ptr ray -> void
    # Frees a ray struct
    ray
    dup ray.origin +    derefp free
    dup ray.direction + derefp free
    free

def ray_at: ptr ray, ptr distance -> ptr
    # Returns the point of vector ray at a certain distance
    ray ray.direction + derefp copy_vec distance vec_scale
    ray ray.origin + derefp copy_vec vec_add


# Pathtracer

def render_pixel: int x, int y -> ptr
    # Calculate a single pixel
    x WIDTH create_ratio y HEIGHT create_ratio 1 4 create_ratio create_color


def output_color: ptr color -> void
    # Prints a given color in PPM format
    # Note that the color is freed afterwards
    color
    dup color.r + derefp COLOR_PRECISION itor ratio_mul rtoi itos puts " " puts
    dup color.g + derefp COLOR_PRECISION itor ratio_mul rtoi itos puts " " puts
    dup color.b + derefp COLOR_PRECISION itor ratio_mul rtoi itos puts " " puts
    free_color


def main: ptr argv, int argc -> int
    # Print PPM metadata
    "P3 " puts
    WIDTH itos puts " " puts
    HEIGHT itos puts " " puts
    COLOR_PRECISION itos puts "\n" puts

    # Render image
    0
    while dup HEIGHT <
        0
        while dup WIDTH <
            over over swap render_pixel output_color
            1 +
        drop
        1 +

        "\n" puts
    0
