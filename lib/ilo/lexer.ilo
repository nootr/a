import lib.std
import lib.ilo.tokens
import lib.ilo.types
import lib.ilo.helpers


buffer _indent_stack 8  # ptr
buffer _at_start     1  # bool


def tokenize: ptr source -> ptr
    # Tokenizes a given source code and returns a pointer to the tokenlist

    # Initialize values
    tokenlist derefp NULL = if
        1 create_tokenlist tokenlist setp

    _indent_stack derefp NULL = if
        0 INT_SIZE new_list list_append _indent_stack setp

    True _at_start setb

    # Tokenize source code
    1       # line
    source  # current_char

    while dup derefc 0 castc !=
        # Count indenting and create block begin/end tokens if necessary
        _indent_stack derefp list.len + derefi 0 > \
            "Indent stack should have items" assert

        dup count_indent
        _at_start derefb if
            False _at_start setb

            dup _indent_stack derefp list_peek > if
                dup _indent_stack derefp list_append _indent_stack setp
                rot dup TOKEN_BLOCK_START NULL create_token rot rot
            dup _indent_stack derefp list_peek < if
                while dup _indent_stack derefp list_pop !=
                    _indent_stack derefp list.len + derefi 0 = if
                        rot dup "Unexpexted indenting" syntax_error rot rot
                    rot dup TOKEN_BLOCK_END NULL create_token rot rot
                dup _indent_stack derefp list_append _indent_stack setp
        +

        dup derefc '#' = if
            while dup derefc 10 castc != over derefc 0 castc != and
                1 +
        elif dup derefc '\\' =
            while dup derefc 10 castc != over derefc 0 castc != and
                1 +
            1 + swap 1 + swap
        elif dup derefc is_int
            dup

            # Count length of integer
            0 swap
            while dup derefc is_int
                1 + swap 1 + swap
            drop

            # Get token value
            over swap substring

            # Create token
            rot dup rot dup strlen rot rot TOKEN_INT swap create_token

            # Shift source
            rot +
        elif dup derefc '\'' =
            1 +
            dup derefc '\\' = if
                1 +
            dup 1 + derefc '\'' != if
                swap "Character should be a single character" syntax_error 0 swap
            dup 1 substring rot dup rot TOKEN_CHAR swap create_token
            swap 2 +
        elif dup derefc '"' =
            1 +

            # Find length of string
            0
            over
            while dup derefc '"' = over 1 - derefc '\\' != and False =
                1 + swap 1 + swap

            # Separate string
            rot rot substring

            # Create token
            rot dup rot TOKEN_STRING swap create_token
            swap
            1 +
        elif dup "->" startswith
            over TOKEN_ARROW NULL create_token
            2 +
        elif dup derefc '+' =
            over TOKEN_ARITHMETIC "+" create_token
            1 +
        elif dup derefc '-' =
            over TOKEN_ARITHMETIC "-" create_token
            1 +
        elif dup derefc '*' =
            over TOKEN_ARITHMETIC "*" create_token
            1 +
        elif dup derefc '/' =
            over TOKEN_ARITHMETIC "/" create_token
            1 +
        elif dup "and" startswith
            over TOKEN_ARITHMETIC "and" create_token
            3 +
        elif dup "or" startswith
            over TOKEN_ARITHMETIC "or" create_token
            2 +
        elif dup "shl" startswith
            over TOKEN_ARITHMETIC "shl" create_token
            3 +
        elif dup "shr" startswith
            over TOKEN_ARITHMETIC "shr" create_token
            3 +
        elif dup "True" startswith
            over TOKEN_BOOL "1" create_token
            4 +
        elif dup "False" startswith
            over TOKEN_BOOL "0" create_token
            5 +
        elif dup derefc ':' =
            over TOKEN_COLON NULL create_token
            1 +
        elif dup derefc ',' =
            over TOKEN_COMMA NULL create_token
            1 +
        elif dup "!=" startswith
            over TOKEN_COMPARISON "!=" create_token
            2 +
        elif dup ">=" startswith
            over TOKEN_COMPARISON ">=" create_token
            2 +
        elif dup "<=" startswith
            over TOKEN_COMPARISON "<=" create_token
            2 +
        elif dup derefc '=' =
            over TOKEN_COMPARISON "=" create_token
            1 +
        elif dup derefc '<' =
            over TOKEN_COMPARISON "<" create_token
            1 +
        elif dup derefc '>' =
            over TOKEN_COMPARISON ">" create_token
            1 +
        elif dup "buffer" startswith
            over TOKEN_KEYWORD "buffer" create_token
            6 +
        elif dup "castb" startswith
            over TOKEN_KEYWORD "castb" create_token
            5 +
        elif dup "castc" startswith
            over TOKEN_KEYWORD "castc" create_token
            5 +
        elif dup "casti" startswith
            over TOKEN_KEYWORD "casti" create_token
            5 +
        elif dup "castp" startswith
            over TOKEN_KEYWORD "castp" create_token
            5 +
        elif dup "const" startswith
            over TOKEN_KEYWORD "const" create_token
            5 +
        elif dup "debug" startswith
            over TOKEN_KEYWORD "debug" create_token
            5 +
        elif dup "def" startswith
            over TOKEN_KEYWORD "def" create_token
            3 +
        elif dup "derefb" startswith
            over TOKEN_KEYWORD "derefb" create_token
            6 +
        elif dup "derefc" startswith
            over TOKEN_KEYWORD "derefc" create_token
            6 +
        elif dup "derefi" startswith
            over TOKEN_KEYWORD "derefi" create_token
            6 +
        elif dup "derefp" startswith
            over TOKEN_KEYWORD "derefp" create_token
            6 +
        elif dup "drop" startswith
            over TOKEN_KEYWORD "drop" create_token
            4 +
        elif dup "dup" startswith
            over TOKEN_KEYWORD "dup" create_token
            3 +
        elif dup "elif" startswith
            over TOKEN_KEYWORD "elif" create_token
            4 +
        elif dup "else" startswith
            over TOKEN_KEYWORD "else" create_token
            4 +
        elif dup "if" startswith
            over TOKEN_KEYWORD "if" create_token
            2 +
        elif dup "import" startswith
            over TOKEN_KEYWORD "import" create_token
            6 +
        elif dup "location" startswith
            over TOKEN_KEYWORD "location" create_token
            8 +
        elif dup "over" startswith
            over TOKEN_KEYWORD "over" create_token
            4 +
        elif dup "rot" startswith
            over TOKEN_KEYWORD "rot" create_token
            3 +
        elif dup "setb" startswith
            over TOKEN_KEYWORD "setb" create_token
            4 +
        elif dup "setc" startswith
            over TOKEN_KEYWORD "setc" create_token
            4 +
        elif dup "seti" startswith
            over TOKEN_KEYWORD "seti" create_token
            4 +
        elif dup "setp" startswith
            over TOKEN_KEYWORD "setp" create_token
            4 +
        elif dup "swap" startswith
            over TOKEN_KEYWORD "swap" create_token
            4 +
        elif dup "syscall" startswith
            over TOKEN_KEYWORD "syscall" create_token
            7 +
        elif dup "bool" startswith
            over TOKEN_TYPE "bool" create_token
            4 +
        elif dup "char" startswith
            over TOKEN_TYPE "char" create_token
            4 +
        elif dup "int" startswith
            over TOKEN_TYPE "int" create_token
            3 +
        elif dup "ptr" startswith
            over TOKEN_TYPE "ptr" create_token
            3 +
        elif dup "void" startswith
            over TOKEN_TYPE "void" create_token
            4 +
        elif dup "while" startswith
            over TOKEN_TYPE "while" create_token
            5 +
        elif dup derefc is_alphabet
            dup

            # Count length of identifier
            0 swap
            while dup derefc is_alphabet over derefc is_int or
                1 + swap 1 + swap
            drop

            # Get token value
            over swap substring

            # Create token
            rot dup rot dup strlen rot rot TOKEN_IDENTIFIER swap create_token

            # Shift source
            rot +
        elif dup derefc 10 castc =
            while dup derefc 10 castc =
                swap 1 + swap 1 +
            True _at_start setb
        else
            over NULL syntax_error

    drop
    while _indent_stack derefp list_peek 0 !=
        _indent_stack derefp list_pop drop
        dup TOKEN_BLOCK_END NULL create_token

    # Return a pointer to the tokenlist
    tokenlist derefp
