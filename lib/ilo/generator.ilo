import lib.std
import lib.ilo.opcodes


buffer _text 8  # ptr
buffer _data 8  # ptr
buffer _bss  8  # ptr


def _format: ptr l, ptr r -> ptr
    # Formats a line of assembly code into two columns
    l " " concat
    while dup strlen 10 <=
        " " concat
    r concat "\n" concat


def _append: ptr l, ptr r, ptr buf -> void
    # Append to a given buffer
    buf derefp l r _format concat buf setp


def generate_code_x86_64_linux: ptr opcodes -> ptr
    # Takes a list of opcodes and converts it into x86_64 NASM assembly as string

    # Initialize buffers
    "" _text setp
    "" _data setp
    "" _bss setp

    "" "global _start"      _text _append
    "" "section .text"      _text _append
    "" "section .data"      _data _append
    "s_tb:" "db \`\\n\`, 0" _data _append
    "" "section .bss"       _bss _append

    # Generate assembly
    0
    while dup opcodes list.len + derefi <
        dup opcodes list_fetch

        # Add opcode info comment
        "; "
        over opcode.line + derefi itos            concat
        ": "                                      concat
        over opcode.opcode + derefi opcode_to_str concat
        "" swap _text _append

        dup opcode.opcode + derefi OPCODE_PUSH_INT = if
            "mov rax, " over opcode.operand + derefp concat "" swap _text _append
            "" "push rax"                                           _text _append
        elif dup opcode.opcode + derefi OPCODE_FUNCTION =
            dup opcode.operand + derefp ":" concat "" _text _append
            "" "push rbp"                             _text _append
            "" "mov rbp, rsp"                         _text _append
        elif dup opcode.opcode + derefi OPCODE_ADD =
            "" "pop rax"      _text _append
            "" "pop rbx"      _text _append
            "" "add rbx, rax" _text _append
            "" "push rbx"     _text _append
        elif dup opcode.opcode + derefi OPCODE_RETURN =
            "" "pop rax"      _text _append
            "" "mov rsp, rbp" _text _append
            "" "pop rbp"      _text _append
            "" "ret"          _text _append
        else
            "Unknown opcode: "
            over opcode.opcode + derefi opcode_to_str
            concat "\n" concat raise

        drop
        1 +

    # Add entrypoint
    "_start:" ""        _text _append
    "" "mov rax, s_tb"  _text _append
    "" "push rax"       _text _append
    "" "mov rax, 0"     _text _append
    "" "push rax"       _text _append
    "" "call main"      _text _append
    "_end:" ""          _text _append
    "" "mov rdi, rax"   _text _append
    "" "mov rax, 60"    _text _append
    "" "syscall"        _text _append

    # Concatenate buffers
    _text derefp _data derefp concat _bss derefp concat
    _text derefp free
    _data derefp free
    _bss derefp free
