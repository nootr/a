import lib.std

import lib.ilo.tokens
import lib.ilo.types


## Helper functions

def syntax_error: int line_no, ptr message -> void
    # Raises a syntax error and exits with 1
    "Syntax error at line " error
    line_no                 errori
    message NULL != if
        ": "                error
        message             error
    "\n"                    error
    1 exit


def is_int: char c -> bool
    # Returns True if given character is a number
    '0' c <= c '9' <= and


def is_alphabet: char c -> bool
    'A' c <= c 'Z' <= and
    'a' c <= c 'z' <= and or
    c '-' =               or
    c '_' =               or
    c '.' =               or


def count_indent: ptr s -> int
    # Takes a string and returns the number of leading spaces and/or tabs
    0
    s
    while dup derefc ' ' = over derefc 9 castc = or
        1 + swap
        1 + swap
    drop



buffer indent_stack 8  # ptr
buffer at_start     1  # bool

def tokenize: ptr source -> void
    # Tokenizes a given source code

    # Initialize values
    tokenlist derefp NULL = if
        1 create_tokenlist tokenlist setp

    indent_stack derefp NULL = if
        0 new_list list_append indent_stack setp

    True at_start setb

    # Tokenize source code

    1       # line
    source  # current_char

    while dup derefc 0 castc !=
        # Count indenting and create block begin/end tokens if necessary
        indent_stack derefp list.len + derefi 0 > \
            "Indent stack should have items" assert

        dup count_indent
        at_start derefb if
            False at_start setb

            dup indent_stack derefp list_peek > if
                dup indent_stack derefp list_append indent_stack setp
                rot dup TOKEN_BLOCK_START NULL create_token rot rot
            dup indent_stack derefp list_peek < if
                while dup indent_stack derefp list_pop !=
                    indent_stack derefp list.len + derefi 0 = if
                        rot dup "Unexpexted indenting" syntax_error rot rot
                    rot dup TOKEN_BLOCK_END NULL create_token rot rot
                dup indent_stack derefp list_append indent_stack setp
        +

        dup derefc '#' = if
            while dup derefc 10 castc != over derefc 0 castc != and
                1 +
        elif dup derefc '\\' =
            while dup derefc 10 castc != over derefc 0 castc != and
                1 +
            1 + swap 1 + swap
        elif dup derefc is_int
            dup

            # Count length of integer
            0 swap
            while dup derefc is_int
                1 + swap 1 + swap
            drop

            # Get token value
            over swap substring

            # Create token
            rot dup rot dup strlen rot rot TOKEN_INT swap create_token

            # Shift source
            rot +
        elif dup derefc '\'' =
            1 +
            dup derefc '\\' = if
                1 +
            dup 1 + derefc '\'' != if
                swap "Character should be a single character" syntax_error 0 swap
            dup 1 substring rot dup rot TOKEN_CHAR swap create_token
            swap 2 +
        elif dup derefc '"' =
            1 +

            # Find length of string
            0
            over
            while dup derefc '"' = over 1 - derefc '\\' != and False =
                1 + swap 1 + swap

            # Separate string
            rot rot substring

            # Create token
            rot dup rot TOKEN_STRING swap create_token
            swap
            1 +
        elif dup "->" startswith
            over TOKEN_ARROW NULL create_token
            2 +
        elif dup derefc '+' =
            over TOKEN_ARITHMETIC "+" create_token
            1 +
        elif dup derefc '-' =
            over TOKEN_ARITHMETIC "-" create_token
            1 +
        elif dup derefc '*' =
            over TOKEN_ARITHMETIC "*" create_token
            1 +
        elif dup derefc '/' =
            over TOKEN_ARITHMETIC "/" create_token
            1 +
        elif dup "and" startswith
            over TOKEN_ARITHMETIC "and" create_token
            3 +
        elif dup "or" startswith
            over TOKEN_ARITHMETIC "or" create_token
            2 +
        elif dup "shl" startswith
            over TOKEN_ARITHMETIC "shl" create_token
            3 +
        elif dup "shr" startswith
            over TOKEN_ARITHMETIC "shr" create_token
            3 +
        elif dup "True" startswith
            over TOKEN_BOOL "1" create_token
            4 +
        elif dup "False" startswith
            over TOKEN_BOOL "0" create_token
            5 +
        elif dup derefc ':' =
            over TOKEN_COLON NULL create_token
            1 +
        elif dup derefc ',' =
            over TOKEN_COMMA NULL create_token
            1 +
        elif dup "!=" startswith
            over TOKEN_COMPARISON "!=" create_token
            2 +
        elif dup ">=" startswith
            over TOKEN_COMPARISON ">=" create_token
            2 +
        elif dup "<=" startswith
            over TOKEN_COMPARISON "<=" create_token
            2 +
        elif dup derefc '=' =
            over TOKEN_COMPARISON "=" create_token
            1 +
        elif dup derefc '<' =
            over TOKEN_COMPARISON "<" create_token
            1 +
        elif dup derefc '>' =
            over TOKEN_COMPARISON ">" create_token
            1 +
        elif dup "buffer" startswith
            over TOKEN_KEYWORD "buffer" create_token
            6 +
        elif dup "castb" startswith
            over TOKEN_KEYWORD "castb" create_token
            5 +
        elif dup "castc" startswith
            over TOKEN_KEYWORD "castc" create_token
            5 +
        elif dup "casti" startswith
            over TOKEN_KEYWORD "casti" create_token
            5 +
        elif dup "castp" startswith
            over TOKEN_KEYWORD "castp" create_token
            5 +
        elif dup "const" startswith
            over TOKEN_KEYWORD "const" create_token
            5 +
        elif dup "debug" startswith
            over TOKEN_KEYWORD "debug" create_token
            5 +
        elif dup "def" startswith
            over TOKEN_KEYWORD "def" create_token
            3 +
        elif dup "derefb" startswith
            over TOKEN_KEYWORD "derefb" create_token
            6 +
        elif dup "derefc" startswith
            over TOKEN_KEYWORD "derefc" create_token
            6 +
        elif dup "derefi" startswith
            over TOKEN_KEYWORD "derefi" create_token
            6 +
        elif dup "derefp" startswith
            over TOKEN_KEYWORD "derefp" create_token
            6 +
        elif dup "drop" startswith
            over TOKEN_KEYWORD "drop" create_token
            4 +
        elif dup "dup" startswith
            over TOKEN_KEYWORD "dup" create_token
            3 +
        elif dup "else" startswith
            over TOKEN_KEYWORD "else" create_token
            4 +
        elif dup "if" startswith
            over TOKEN_KEYWORD "if" create_token
            2 +
        elif dup "import" startswith
            over TOKEN_KEYWORD "import" create_token
            6 +
        elif dup "location" startswith
            over TOKEN_KEYWORD "location" create_token
            8 +
        elif dup "over" startswith
            over TOKEN_KEYWORD "over" create_token
            4 +
        elif dup "rot" startswith
            over TOKEN_KEYWORD "rot" create_token
            3 +
        elif dup "setb" startswith
            over TOKEN_KEYWORD "setb" create_token
            4 +
        elif dup "setc" startswith
            over TOKEN_KEYWORD "setc" create_token
            4 +
        elif dup "seti" startswith
            over TOKEN_KEYWORD "seti" create_token
            4 +
        elif dup "setp" startswith
            over TOKEN_KEYWORD "setp" create_token
            4 +
        elif dup "swap" startswith
            over TOKEN_KEYWORD "swap" create_token
            4 +
        elif dup "syscall" startswith
            over TOKEN_KEYWORD "syscall" create_token
            7 +
        elif dup "bool" startswith
            over TOKEN_TYPE "bool" create_token
            4 +
        elif dup "char" startswith
            over TOKEN_TYPE "char" create_token
            4 +
        elif dup "int" startswith
            over TOKEN_TYPE "int" create_token
            3 +
        elif dup "ptr" startswith
            over TOKEN_TYPE "ptr" create_token
            3 +
        elif dup "void" startswith
            over TOKEN_TYPE "void" create_token
            4 +
        elif dup "while" startswith
            over TOKEN_TYPE "while" create_token
            5 +
        elif dup derefc is_alphabet
            dup

            # Count length of identifier
            0 swap
            while dup derefc is_alphabet over derefc is_int or
                1 + swap 1 + swap
            drop

            # Get token value
            over swap substring

            # Create token
            rot dup rot dup strlen rot rot TOKEN_IDENTIFIER swap create_token

            # Shift source
            rot +
        elif dup derefc 10 castc =
            while dup derefc 10 castc =
                swap 1 + swap 1 +
            True at_start setb
        else
            over NULL syntax_error

    drop
    while indent_stack derefp list_peek 0 !=
        indent_stack derefp list_pop drop
        dup TOKEN_BLOCK_END NULL create_token


def main: ptr argv, int argc -> int
    # Debug flags
    True  VERIFY_MEMORY setb
    False DUMP_MEMORY   setb

    argc 2 != if
        "Usage: "           puts
        argv 0 get_argument puts
        " FILENAME\n"       puts
        1 exit

    argv 1 get_argument
    read_file
    tokenize

    "Number of tokens: "                            puts
    tokenlist derefp tokenlist.num_tokens + derefi  puti
    "\n"                                            puts

    "Tokens:\n" puts
    0
    while dup tokenlist derefp tokenlist.num_tokens + derefi <
        "* " puts
        dup TOKEN_SIZE *
        tokenlist derefp tokenlist.tokens + +
        token.type + derefi token_to_str puts " " puts
        dup TOKEN_SIZE *
        tokenlist derefp tokenlist.tokens + +
        token.value + derefp
        dup NULL != if
            puts " " puts
        else
            drop
        dup TOKEN_SIZE *
        tokenlist derefp tokenlist.tokens + +
        token.line + derefi puti " " puts
        "\n" puts
        1 +
    drop

    0
