import lib.std

import lib.ilo.tokens
import lib.ilo.types


## Helper functions

def syntax_error: int line_no, ptr message -> void
    # Raises a syntax error and exits with 1
    # TODO: print line (convert int to str)
    "Syntax error: " error
    message          error
    "\n"             error
    1 exit


def is_int: char c -> bool
    # Returns True if given character is a number
    '0' c <= c '9' <= and


def is_alphabet: char c -> bool
    'A' c <= c 'Z' <= and
    'a' c <= c 'z' <= and or
    c '-' =               or
    c '_' =               or
    c '.' =               or


def count_indent: ptr s -> int
    # Takes a string and returns the number of leading spaces and/or tabs
    0
    s
    while dup derefc ' ' = over derefc 9 castc = or
        1 + swap
        1 + swap
    drop


def tokenize: ptr source -> void
    # Tokenizes a given source code

    # Initialize tokenlist if needed
    tokenlist derefp NULL = if
        1 create_tokenlist tokenlist setp

    tokenlist derefp NULL != "Tokenlist should be created" assert

    # Tokenize source code
    0       # line
    source  # current_char

    while dup derefc 0 castc !=
        # Count indenting and create block begin/end tokens if necessary
        dup count_indent
        # TODO: Create token for indent changes
        +

        dup derefc '#' = if
            while dup derefc '\n' !=
                1 +
        dup derefc is_int if
            dup

            # Count length of integer
            0 swap
            while dup derefc is_int
                1 + swap 1 + swap
            drop

            # Get token value
            over swap substring

            # Create token
            rot dup rot dup strlen rot rot TOKEN_INT swap create_token

            # Shift source
            rot + 1 -
        dup derefc '\'' = if
            1 +
            dup derefc '\\' = if
                1 +
            dup 1 + derefc '\'' != if
                swap "Character should be a single character" syntax_error 0 swap
            dup 1 substring rot dup rot TOKEN_CHAR swap create_token
            swap 1 +
        dup derefc '"' = if
            1 +

            # Find length of string
            0
            over
            while dup derefc '"' = over 1 - derefc '\\' != and False =
                1 + swap 1 + swap

            # Separate string
            rot rot substring

            # Create token
            rot dup rot TOKEN_STRING swap create_token
            swap
        dup "->" startswith if
            over TOKEN_ARROW NULL create_token
            2 +
        dup derefc '+' = if
            over TOKEN_ARITHMETIC "+" create_token
            1 +
        dup derefc '-' = if
            over TOKEN_ARITHMETIC "-" create_token
            1 +
        dup derefc '*' = if
            over TOKEN_ARITHMETIC "*" create_token
            1 +
        dup derefc '/' = if
            over TOKEN_ARITHMETIC "/" create_token
            1 +
        dup "and" startswith if
            over TOKEN_ARITHMETIC "and" create_token
            3 +
        dup "or" startswith if
            over TOKEN_ARITHMETIC "or" create_token
            2 +
        dup "shl" startswith if
            over TOKEN_ARITHMETIC "shl" create_token
            3 +
        dup "shr" startswith if
            over TOKEN_ARITHMETIC "shr" create_token
            3 +
        dup "True" startswith if
            over TOKEN_BOOL "1" create_token
            4 +
        dup "False" startswith if
            over TOKEN_BOOL "0" create_token
            5 +
        dup derefc ':' = if
            over TOKEN_COLON NULL create_token
            1 +
        dup derefc ',' = if
            over TOKEN_COMMA NULL create_token
            1 +
        dup "!=" startswith if
            over TOKEN_COMPARISON "!=" create_token
            2 +
        dup ">=" startswith if
            over TOKEN_COMPARISON ">=" create_token
            2 +
        dup "<=" startswith if
            over TOKEN_COMPARISON "<=" create_token
            2 +
        dup derefc '=' = if
            over TOKEN_COMPARISON "=" create_token
            1 +
        dup derefc '<' = if
            over TOKEN_COMPARISON "<" create_token
            1 +
        dup derefc '>' = if
            over TOKEN_COMPARISON ">" create_token
            1 +
        dup "buffer" startswith if
            over TOKEN_KEYWORD "buffer" create_token
            6 +
        dup "castb" startswith if
            over TOKEN_KEYWORD "castb" create_token
            5 +
        dup "castc" startswith if
            over TOKEN_KEYWORD "castc" create_token
            5 +
        dup "casti" startswith if
            over TOKEN_KEYWORD "casti" create_token
            5 +
        dup "castp" startswith if
            over TOKEN_KEYWORD "castp" create_token
            5 +
        dup "const" startswith if
            over TOKEN_KEYWORD "const" create_token
            5 +
        dup "debug" startswith if
            over TOKEN_KEYWORD "debug" create_token
            5 +
        dup "def" startswith if
            over TOKEN_KEYWORD "def" create_token
            3 +
        dup "derefb" startswith if
            over TOKEN_KEYWORD "derefb" create_token
            6 +
        dup "derefc" startswith if
            over TOKEN_KEYWORD "derefc" create_token
            6 +
        dup "derefi" startswith if
            over TOKEN_KEYWORD "derefi" create_token
            6 +
        dup "derefp" startswith if
            over TOKEN_KEYWORD "derefp" create_token
            6 +
        dup "drop" startswith if
            over TOKEN_KEYWORD "drop" create_token
            4 +
        dup "dup" startswith if
            over TOKEN_KEYWORD "dup" create_token
            3 +
        dup "else" startswith if
            over TOKEN_KEYWORD "else" create_token
            4 +
        dup "if" startswith if
            over TOKEN_KEYWORD "if" create_token
            2 +
        dup "import" startswith if
            over TOKEN_KEYWORD "import" create_token
            6 +
        dup "location" startswith if
            over TOKEN_KEYWORD "location" create_token
            8 +
        dup "over" startswith if
            over TOKEN_KEYWORD "over" create_token
            4 +
        dup "rot" startswith if
            over TOKEN_KEYWORD "rot" create_token
            3 +
        dup "setb" startswith if
            over TOKEN_KEYWORD "setb" create_token
            4 +
        dup "setc" startswith if
            over TOKEN_KEYWORD "setc" create_token
            4 +
        dup "seti" startswith if
            over TOKEN_KEYWORD "seti" create_token
            4 +
        dup "setp" startswith if
            over TOKEN_KEYWORD "setp" create_token
            4 +
        dup "swap" startswith if
            over TOKEN_KEYWORD "swap" create_token
            4 +
        dup "syscall" startswith if
            over TOKEN_KEYWORD "syscall" create_token
            7 +
        dup "bool" startswith if
            over TOKEN_TYPE "bool" create_token
            4 +
        dup "char" startswith if
            over TOKEN_TYPE "char" create_token
            4 +
        dup "int" startswith if
            over TOKEN_TYPE "int" create_token
            3 +
        dup "ptr" startswith if
            over TOKEN_TYPE "ptr" create_token
            3 +
        dup "void" startswith if
            over TOKEN_TYPE "void" create_token
            4 +
        dup "while" startswith if
            over TOKEN_TYPE "while" create_token
            5 +

        1 +


def main: ptr argv, int argc -> int
    argc 2 != if
        "Usage: "           puts
        argv 0 get_argument puts
        " FILENAME\n"       puts
        1 exit

    argv 1 get_argument
    read_file
    tokenize

    19 malloc dup
    tokenlist derefp tokenlist.num_tokens + derefi
    swap i64tohex
    "Number of tokens: " puts dup puts "\n" puts
    free

    "Tokens:\n" puts
    0
    while dup tokenlist derefp tokenlist.num_tokens + derefi <
        "* " puts
        dup TOKEN_SIZE *
        tokenlist derefp tokenlist.tokens + +
        token.type + derefi token_to_str puts " " puts
        dup TOKEN_SIZE *
        tokenlist derefp tokenlist.tokens + +
        token.value + derefp
        dup NULL != if
            puts
        else
            drop
        "\n" puts
        1 +
    drop

    0
