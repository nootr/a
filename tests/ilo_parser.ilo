# Description:ilo.parser - Parse tokens
# Exit code:0
# Stdout:
# Stderr:

import lib.std
import lib.std.list
import lib.ilo.lexer
import lib.ilo.parser


def main: int argc, ptr argv -> int
    True  VERIFY_MEMORY setb
    False DUMP_MEMORY setb

    "foo.ilo"

    "6 3 +_"          dup 5  + 10  castc swap setc
    "'q' True_"       dup 8  + 10  castc swap setc concat
    "_foo__"          dup 5  + 10  castc swap setc \
                      dup      '"'       swap setc \
                      dup 4  + '"'       swap setc concat
    "1 2 - 2 *_"      dup 9  + 10  castc swap setc concat
    "1 2 !=_"         dup 6  + 10  castc swap setc concat
    "syscall 3_"      dup 9  + 10  castc swap setc concat
    "1 2 and_"        dup 7  + 10  castc swap setc concat
    "1 2 or_"         dup 6  + 10  castc swap setc concat
    "1 2 shr_"        dup 7  + 10  castc swap setc concat
    "1 2 shl_"        dup 7  + 10  castc swap setc concat
    "_bar_ "          dup      '"'       swap setc \
                      dup 4  + '"'       swap setc concat
    "derefc_"         dup 6  + 10  castc swap setc concat
    "'f' _baz_ "      dup 4  + '"'       swap setc \
                      dup 8  + '"'       swap setc concat
    "setc_"           dup 4  + 10  castc swap setc concat
    "const a 8_"      dup 9  + 10  castc swap setc concat
    "a_"              dup 1  + 10  castc swap setc concat
    "buffer b 8_"     dup 10 + 10  castc swap setc concat
    "b_"              dup 1  + 10  castc swap setc concat
    "while True_"     dup 10 + 10  castc swap setc concat
    "    1_"          dup 5  + 10  castc swap setc concat
    "    drop_"       dup 8  + 10  castc swap setc concat
    "True if_"        dup 7  + 10  castc swap setc concat
    "    1_"          dup 5  + 10  castc swap setc concat
    "elif True_"      dup 9  + 10  castc swap setc concat
    "    2_"          dup 5  + 10  castc swap setc concat
    "else_"           dup 4  + 10  castc swap setc concat
    "    3_"          dup 5  + 10  castc swap setc concat
    "def o: int x -> bool_" \
                      dup 20 + 10  castc swap setc concat
    "    x 1 =_"      dup 9  + 10  castc swap setc concat
    "def p: -> void_" dup 14 + 10  castc swap setc concat
    "    1 o_"        dup 7  + 10  castc swap setc concat

    tokenize
    parse
    list.items +

    OPCODE_SIZE 147 * +  # Skip the core functions
    dup opcode.opcode  + derefi OPCODE_PUSH_INT =      "Op 1 should be integer" assert
    dup opcode.operand + derefp "6" streq              "Op 1 should be 6" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_INT =      "Op 2 should be integer" assert
    dup opcode.operand + derefp "3" streq              "Op 2 should be 3" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_ADD =           "Op 3 should be integer" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_CHAR =     "Op 4 should be character" assert
    dup opcode.operand + derefp "q" streq              "Op 4 should be q" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_BOOL =     "Op 5 should be character" assert
    dup opcode.operand + derefp "1" streq              "Op 5 should be True" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_STRING =   "Op 6 should be string" assert
    dup opcode.operand + derefp "foo" streq            "Op 6 should be foo" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_SUBTRACT =      "Op 7 should be subtract" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_MULTIPLY =      "Op 8 should be multiply" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_IS_NOT_EQUAL =  "Op 9 should be not equal" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_SYSCALL =       "Op 10 should be syscall" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_BITWISE_AND =   "Op 11 should be and" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_BITWISE_OR =    "Op 12 should be or" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_SHIFT_RIGHT =   "Op 13 should be shift right" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_SHIFT_LEFT =    "Op 14 should be shift left" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_DEREF_C =       "Op 14 should be derefc" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_SET_C =         "Op 15 should be setc" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_INT =      "Op 17 should be push int" assert
    dup opcode.operand + derefp "8" streq              "Op 17 should be 8" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_CREATE_BUFFER = "Op 18 should be get buffer" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_GET_BUFFER =    "Op 19 should be get buffer" assert
    dup opcode.operand + derefp "b" streq              "Op 19 should be b" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_LABEL =         "Op 20 should be label" assert
    dup opcode.operand + derefp "while_" startswith    "Op 20 should start with while_" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_BOOL =     "Op 21 should be boolean" assert
    dup opcode.operand + derefp "1" streq              "Op 21 should be True" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_WHILE_START =   "Op 22 should be while start" assert
    dup opcode.operand + derefp "while_" startswith    "Op 22 should start with while_" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_INT =      "Op 23 should be push int" assert
    dup opcode.operand + derefp "1" streq              "Op 23 should be 1" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_DROP =          "Op 24 should be drop" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_WHILE_END =     "Op 25 should be while end" assert
    dup opcode.operand + derefp "while_" startswith    "Op 25 should start with while_" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_IF =            "Op 26 should be if" assert
    dup opcode.operand + derefp "if_" startswith       "Op 26 should start with if_" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_JUMP =          "Op 27 should be jump" assert
    dup opcode.operand + derefp "end_" startswith      "Op 27 should start with end_" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_LABEL =         "Op 28 should be label" assert
    dup opcode.operand + derefp "if_" startswith       "Op 28 should start with if_" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_IF =            "Op 29 should be if" assert
    dup opcode.operand + derefp "elif_" startswith     "Op 29 should start with elif_" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_JUMP =          "Op 30 should be jump" assert
    dup opcode.operand + derefp "end_" startswith      "Op 30 should start with end_" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_LABEL =         "Op 31 should be label" assert
    dup opcode.operand + derefp "elif_" startswith     "Op 31 should start with elif_" assert
    OPCODE_SIZE 2 * +
    dup opcode.opcode  + derefi OPCODE_LABEL =         "Op 32 should be label" assert
    dup opcode.operand + derefp "end_" startswith      "Op 32 should start with end_" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_FUNCTION =      "Op 33 should be function" assert
    dup opcode.operand + derefp "o" streq              "Op 33 should be o" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_GET_ARG =       "Op 33 should be get arg" assert
    dup opcode.operand + derefp "48" streq             "Op 33 should be 48" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_RESTORE_FRAME = "Op 34 should be res.fr." assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_RETURN =        "Op 35 should be return" assert
    "o" functions derefp dict_fetch function.args + derefp \
        list.len + derefi 1 =                          "Func should have 1 arg" assert
    "o" functions derefp dict_fetch function.return_type + derefi \
        TYPE_BOOL =                                    "Func should return bool" assert
    OPCODE_SIZE 3 * +
    dup opcode.opcode  + derefi OPCODE_PUSH_STRING =   "Op 36 should be push str" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_INT =      "Op 37 should be push int" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_STRING =   "Op 38 should be push str" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_PUSH_BOOL =     "Op 39 should be push bool" assert
    OPCODE_SIZE +
    dup opcode.opcode  + derefi OPCODE_CALL =          "Op 40 should be call" assert
    dup opcode.operand + derefp "o" streq              "Op 40 should be o" assert
    0
